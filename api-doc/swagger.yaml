openapi: "3.0.0"
info:
  description: "CreamCats Backend API Doc. The database schema can be found at []()"
  version: "1.0.0"
  title: "CreamCats Backend API Doc"
servers:
  - url: http://localhost:6400/
    description: local development server
tags:
- name: "applications"
  description: "Applications"
- name: "auth"
  description: "Authentication & authorisation"
- name: "events"
  description: "Events"
- name: "organizations"
  description: "Organization"
- name: "positions"
  description: "Positions"
- name: "posts"
  description: "Posts"
- name: "tags"
  description: "Tags for recommendations"
- name: "users"
  description: "Users"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Application:
      properties:
        userId:
          type: "integer"
          description: "id of the user"
        positionId:
          type: "integer"
          description: "id of the position"
        notes:
          type: "string"
          description: "notes from the user"
        status:
          type: "string"
          enum:
          - "PENDING"
          - "ACCEPTED"
          - "REJECTED"
          description: "status of the application"
    AuthRequestBody:
      properties:
        email:
          type: "string"
        password:
          type: "string"
        type:
          type: "string"
          enum:
          - "volunteer"
          - "organization"
    AccessToken:
      properties:
        accessToken:
          type: "string"
          description: "JWT token"
    ErrorResponse:
      properties:
        statusCode:
          type: "integer"
          description: "status code"
        message:
          type: "string"
          description: "error message"
    Event:
      properties:
        id:
          type: "integer"
          description: "id of the event"
        name:
          type: "string"
          description: "name of the event"
        desc:
          type: "string"
          description: "description of the event"
        gallery:
          description: "gallery of the event"
          type: "array"
          items:
            type: "string"
        startTime:
          type: "string"
          format: "date-time"
          description: "start time of the event"
        endTime:
          type: "string"
          format: "date-time"
          description: "end time of the event"
        location:
          type: "string"
          description: "location of the event"
    Organization:
      properties:
        id:
          type: "integer"
          description: "id of the organisation"
        name:
          type: "string"
          description: "name of the organisation"
        desc:
          type: "string"
          description: "description of the organisation"
    Position:
      properties:
        id:
          type: "integer"
          description: "id of the position"
        name:
          type: "string"
          description: "name of the position"
        desc:
          type: "string"
          description: "description for the position"
        requirements:
          type: "string"
          description: "requirements for the position"
        tags:
          type: "array"
          items:
            type: "string"
          description: "types of work of the position"
        timeCreated:
          type: "string"
          format: date-time
          description: "when the position is created"
        thumbnail:
          type: "string"
          description: "the thumbnail of the position"
    PositionDetails:
      properties:
        position:
          $ref: "#/components/schemas/Position"
    Post:
      properties:
        id:
          type: "integer"
        title:
          type: "string"
        thumbnail:
          type: "string"
        content:
          type: "string"
    Tag:
      properties:
        id:
          type: "integer"
        name:
          type: "string"
    User:
      properties:
        id:
          type: "integer"
          description: "id of the user"
        email:
          type: "string"
          description: "email of the user"
        fullname:
          type: "string"
          description: "fullname of the user"
        gender:
          type: "string"
          nullable: true
          enum:
          - "MALE"
          - "FEMALE"
          - "OTHER"
          description: "gender"
        age:
          type: "integer"
          nullable: true
          description: "age"
        password:
          type: "string"
          description: "password of the user"
    UserDetails:
      properties:
        id:
          type: "integer"
          description: "id of the user"
        email:
          type: "string"
          description: "email of the user"
        fullname:
          type: "string"
          description: "fullname of the user"
paths:
  /applications:
    post:
      tags:
      - "applications"
      summary: "Submit application"
      requestBody:
        required: true
        content:
          "applications/json":
            schema:
              $ref: "#/components/schemas/Application"
      responses:
        "200":
          description: "successful"
        "409":
          description: "ConflictError: application (with the same userId and positionId) already exists"
        "422":
          description: "SchemaError"
  /applications/{applicationId}:
    get:
      tags:
      - "applications"
      summary: "Get application by id"
      parameters:
      - name: "applicationId"
        in: "path"
        schema:
          type: "integer"
          minimum: 1
        required: true
      responses:
        "200":
          description: "successful"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Application"
        "409":
          description: "ConflictError: application (with the same userId and positionId) already exists"
        "422":
          description: "SchemaError"
  /applications/me:
    get:
      tags:
      - "applications"
      summary: "Get all applications of a user"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "successful"
          content:
            "application/json":
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Application"
  /applications/me/count:
    get:
      tags:
      - "applications"
      summary: "Get number of applications of a user"
      responses:
        "200":
          description: "successful"
          content:
            "application/json":
              schema:
                type: "object"
                items:
                  properties:
                    count:
                      type: "integer"
  /auth/login:
    post:
      tags:
      - "auth"
      summary: "Login"
      requestBody:
        required: true
        content:
          "applications/json":
            schema:
              $ref: "#/components/schemas/AuthRequestBody"
      responses:
        "200":
          description: "Successful login"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/AccessToken"
        "401":
          description: "AuthError"
        "404":
          description: "NotFoundError: User not found"
  /auth/register:
    post:
      tags:
      - "auth"
      summary: "Register a new user"
      requestBody:
        required: true
        content:
          "applications/json":
            schema:
              $ref: "#/components/schemas/AuthRequestBody"
      responses:
        "200":
          description: "successful"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/AccessToken"
        "409":
          description: "ConflictError: User already exists"
  /auth/email:
    get:
      tags:
      - "auth"
      summary: "Check if email is available"
      parameters:
      - name: "email"
        in: "query"
        description: "email address"
        required: true
        schema:
          type: "string"
      - name: "type"
        in: "query"
        description: "account type"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "Email is available"
        "409":
          description: "ConflictError: Email has already been used"
  /events/{eventId}:
    get:
      tags:
      - "events"
      summary: "Get event"
      parameters:
      - name: "eventId"
        in: "path"
        description: "id of event"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "successful"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Event"
        "404":
          description: "NotFoundError: Event not found"
  /organizations/{organizationId}:
    get:
      tags:
      - "organizations"
      summary: "Get organization"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "id of organisation"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "successful"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Organization"
        "404":
          description: "NotFoundError: Organization not found"
  /organizations/{organizationId}/events:
    get:
      tags:
      - "organizations"
      summary: "Get all events of an organization"
      parameters:
      - name: "organizationId"
        in: "path"
        description: "id of organisation"
        required: true
        schema:
          type: "integer"
      - name: "status"
        in: "query"
        description: "status of the event"
        required: false
        schema:
          type: "string"
          enum:
          - "ongoing"
          - "past"
      - name: "limit"
        in: "query"
        required: false
        schema:
          type: "number"
          format: "integer"
      - name: "offset"
        in: "query"
        required: false
        schema:
          type: "number"
          format: "integer"
      responses:
        "200":
          description: "successful"
          content:
            "application/json":
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Event"
  /positions:
    get:
      tags:
      - "positions"
      summary: "Get positions"
      parameters:
      - name: "sort"
        in: "query"
        description: "column to sort by"
        required: false
        schema:
          type: "string"
          enum: [ 'applications', 'distance', 'timecreated' ]
      - name: "order"
        in: "query"
        description: "sort order"
        required: false
        schema:
          type: "string"
          enum: [ 'asc', 'desc' ]
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        schema:
          type: "integer"
      - name: "offset"
        in: "query"
        description: "offset"
        required: false
        schema:
          type: "integer"
      - name: "gender"
        in: "query"
        description: "gender"
        required: false
        schema:
          type: "string"
          enum:
          - "male"
          - "female"
      - name: "tags"
        in: "query"
        description: "tags"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      - name: "dayfrom"
        in: "query"
        required: false
        schema:
          type: "string"
          format: "date-time"
      - name: "dayto"
        in: "query"
        required: false
        schema:
          type: "string"
          format: "date-time"
      - name: "lng"
        in: "query"
        required: false
        description: "longitude - must go together with lat and must not go together with address"
        schema:
          type: "number"
          format: "integer"
      - name: "lat"
        in: "query"
        required: false
        description: "latitude - must go together with lng and must not go together with address"
        schema:
          type: "number"
          format: "integer"
      - name: "addresss"
        required: false
        in: "query"
        description: "an address - use either this, or lng and lat"
        schema:
          type: "string"
      - name: "within"
        in: "query"
        required: false
        description: "(in metres) the range within which positions are searched"
        schema:
          type: "number"
          format: "integer"
      responses:
        "200":
          description: "Successful. If location data is provided, return a list of positions sorted by the distance from the specified location"
          content:
            "application/json":
              schema:
                type: "object"
                properties:
                  total:
                    type: "number"
                    format: "integer"
                  data:
                    type: "array"
                    items:
                      type: "object"
                      properties:
                        id:
                          type: "number"
                          format: "integer"
                        name:
                          type: "string"
                        desc:
                          type: "string"
                        requirements:
                          type: "string"
                        tags:
                          type: "array"
                          items:
                            type: "string"
                        timeCreated:
                          type: "string"
                          format: "date-time"
                        thumbnail:
                          type: "string"
                        eventId:
                          type: "number"
                          format: "string"
                        applicationCount:
                          type: "number"
                          format: "integer"
  /positions/{positionId}:
    get:
      tags:
      - "positions"
      summary: "Get position with id"
      parameters:
      - name: "positionId"
        in: "path"
        description: "id of position"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "successful"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Position"
        "404":
          description: "NotFoundError: Position not found"
  /posts/me:
    get:
      tags:
      - "posts"
      summary: "Get posts of a user"
      responses:
        "200":
          description: "successful"
          content:
            "application/json":
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Post"
        "404":
          description: "NotFoundError: Position not found"
  /tags:
    get:
      tags:
      - "tags"
      summary: "Get all tags"
      responses:
        "200":
          description: "successful"
          content:
            "application/json":
              schema:
                type: "array"
                items:
                  type: "string"
  /tags/search:
    get:
      tags:
      - "tags"
      summary: "Search for tags matching the query"
      parameters:
      - name: "q"
        in: "query"
        description: "tag search query"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "successful"
          content:
            "application/json":
              schema:
                type: "array"
                items:
                  type: "string"
  /users/me:
    get:
      tags:
      - "users"
      summary: "Get user info"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "successful"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/User"
    post:
      tags:
      - "users"
      summary: "Let user update their info"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: "object"
              properties:
                fullname:
                  type: "string"
                age:
                  type: "number"
                gender:
                  type: "string"
                  enum:
                    - "male"
                    - "female"
                    - "other"
                profilePic:
                  type: "string"
      responses:
        "200":
          description: "successful"
